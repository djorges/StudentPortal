// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentPortal.Data;

#nullable disable

namespace StudentPortal.Migrations
{
    [DbContext(typeof(DBMain))]
    [Migration("20241119023914_InsertProfesorData")]
    partial class InsertProfesorData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("StudentPortal.Entities.Calificacion", b =>
                {
                    b.Property<int>("CalificacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Puntuacion")
                        .HasColumnType("int");

                    b.Property<int>("TotalVotos")
                        .HasColumnType("int");

                    b.HasKey("CalificacionId");

                    b.ToTable("calificaciones", (string)null);
                });

            modelBuilder.Entity("StudentPortal.Entities.Curso", b =>
                {
                    b.Property<int>("CursoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Aula")
                        .HasColumnType("int");

                    b.Property<int>("CalificacionId")
                        .HasColumnType("int");

                    b.Property<int>("CantInscriptos")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Creditos")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Duracion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("EsObligatorio")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Horarios")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MaxInscriptos")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProfesorId")
                        .HasColumnType("int");

                    b.Property<string>("Sede")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CursoId");

                    b.HasIndex("CalificacionId")
                        .IsUnique();

                    b.HasIndex("ProfesorId");

                    b.ToTable("cursos", (string)null);
                });

            modelBuilder.Entity("StudentPortal.Entities.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdPerfil")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<float>("Salario")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IdPerfil");

                    b.ToTable("empleados", (string)null);
                });

            modelBuilder.Entity("StudentPortal.Entities.Perfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("perfiles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Administrativo"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Profesor"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Investigador"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Bibliotecario"
                        },
                        new
                        {
                            Id = 5,
                            Nombre = "Academico"
                        });
                });

            modelBuilder.Entity("StudentPortal.Entities.Profesor", b =>
                {
                    b.Property<int>("ProfesorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NivelEstudio")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("PorcentajeAlumnosAprobados")
                        .HasColumnType("float");

                    b.Property<int>("PuntuacionEncuestas")
                        .HasColumnType("int");

                    b.Property<float>("Salario")
                        .HasColumnType("float");

                    b.Property<string>("Trayectoria")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ProfesorId");

                    b.ToTable("profesores", (string)null);

                    b.HasData(
                        new
                        {
                            ProfesorId = 1,
                            Activo = true,
                            Apellido = "Herrera",
                            Especialidad = "Matemáticas",
                            FechaNacimiento = new DateTime(1980, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Femenino",
                            NivelEstudio = "Doctorado",
                            Nombre = "Sonia",
                            PorcentajeAlumnosAprobados = 85.4f,
                            PuntuacionEncuestas = 1890,
                            Salario = 75000.5f,
                            Trayectoria = "10 años y 6 meses",
                            imageUrl = "profe3.jpg"
                        },
                        new
                        {
                            ProfesorId = 2,
                            Activo = true,
                            Apellido = "Sambrano",
                            Especialidad = "Física",
                            FechaNacimiento = new DateTime(1985, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Masculino",
                            NivelEstudio = "Maestria",
                            Nombre = "Héctor",
                            PorcentajeAlumnosAprobados = 80.1f,
                            PuntuacionEncuestas = 980,
                            Salario = 68000f,
                            Trayectoria = "15 años y 6 meses",
                            imageUrl = "profe1.jpg"
                        },
                        new
                        {
                            ProfesorId = 3,
                            Activo = true,
                            Apellido = "Ortega",
                            Especialidad = "Química",
                            FechaNacimiento = new DateTime(1975, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Femenino",
                            NivelEstudio = "Doctorado",
                            Nombre = "Alison",
                            PorcentajeAlumnosAprobados = 76.6f,
                            PuntuacionEncuestas = 796,
                            Salario = 62000f,
                            Trayectoria = "9 años y 11 meses",
                            imageUrl = "profe2.jpg"
                        });
                });

            modelBuilder.Entity("StudentPortal.Entities.Curso", b =>
                {
                    b.HasOne("StudentPortal.Entities.Calificacion", "Calificacion")
                        .WithOne("Curso")
                        .HasForeignKey("StudentPortal.Entities.Curso", "CalificacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentPortal.Entities.Profesor", "Profesor")
                        .WithMany("Cursos")
                        .HasForeignKey("ProfesorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calificacion");

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("StudentPortal.Entities.Empleado", b =>
                {
                    b.HasOne("StudentPortal.Entities.Perfil", "Perfil")
                        .WithMany("Empleados")
                        .HasForeignKey("IdPerfil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("StudentPortal.Entities.Calificacion", b =>
                {
                    b.Navigation("Curso")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentPortal.Entities.Perfil", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("StudentPortal.Entities.Profesor", b =>
                {
                    b.Navigation("Cursos");
                });
#pragma warning restore 612, 618
        }
    }
}
